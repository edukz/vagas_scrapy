"""
Webhook Handler - Sistema de Notifica√ß√µes Autom√°ticas

Sistema completo de webhooks para notificar sobre novas vagas,
atualiza√ß√µes do sistema e eventos importantes.
"""

import asyncio
import json
import time
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from pathlib import Path
import hashlib
import urllib.request
import urllib.parse

from ..utils.menu_system import MenuSystem, Colors


class WebhookHandler:
    """Gerencia sistema de webhooks e notifica√ß√µes"""
    
    def __init__(self):
        self.menu = MenuSystem()
        self.webhooks_dir = Path("data/webhooks")
        self.config_file = self.webhooks_dir / "webhook_config.json"
        self.history_file = self.webhooks_dir / "webhook_history.json"
        
        # Criar diret√≥rio se n√£o existir
        self.webhooks_dir.mkdir(parents=True, exist_ok=True)
        
        # Tipos de eventos suportados
        self.event_types = {
            "new_jobs": "üÜï Novas vagas encontradas",
            "job_update": "üîÑ Vagas atualizadas", 
            "scraping_complete": "‚úÖ Scraping conclu√≠do",
            "scraping_error": "‚ùå Erro no scraping",
            "system_alert": "‚ö†Ô∏è Alerta do sistema",
            "daily_summary": "üìä Resumo di√°rio",
            "threshold_reached": "üéØ Meta alcan√ßada"
        }
        
        # Carregar configura√ß√£o existente
        self.config = self._load_config()
    
    async def manage_webhooks(self) -> None:
        """Interface principal de gerenciamento de webhooks"""
        print(f"\n{Colors.BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó{Colors.RESET}")
        print(f"{Colors.BLUE}‚ïë{Colors.RESET}                        üì° SISTEMA DE WEBHOOKS                           {Colors.BLUE}‚ïë{Colors.RESET}")
        print(f"{Colors.BLUE}‚ïë{Colors.RESET}                  Notifica√ß√µes autom√°ticas em tempo real                 {Colors.BLUE}‚ïë{Colors.RESET}")
        print(f"{Colors.BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Colors.RESET}")
        
        print(f"\n{Colors.GREEN}üöÄ FUNCIONALIDADES DOS WEBHOOKS:{Colors.RESET}")
        print(f"   ‚úÖ Notifica√ß√µes em tempo real")
        print(f"   ‚úÖ M√∫ltiplos tipos de eventos")
        print(f"   ‚úÖ URLs personaliz√°veis (Slack, Discord, Teams, etc)")
        print(f"   ‚úÖ Filtros e condi√ß√µes")
        print(f"   ‚úÖ Hist√≥rico e estat√≠sticas")
        print(f"   ‚úÖ Retry autom√°tico em caso de falha")
        
        # Mostrar status atual
        await self._show_webhook_status()
        
        while True:
            print(f"\n{Colors.CYAN}üì° GERENCIAR WEBHOOKS:{Colors.RESET}")
            print(f"  {Colors.CYAN}[1]{Colors.RESET} ‚ûï Adicionar novo webhook")
            print(f"  {Colors.CYAN}[2]{Colors.RESET} üìã Listar webhooks configurados")
            print(f"  {Colors.CYAN}[3]{Colors.RESET} ‚öôÔ∏è Configurar webhook existente")
            print(f"  {Colors.CYAN}[4]{Colors.RESET} üß™ Testar webhook")
            print(f"  {Colors.CYAN}[5]{Colors.RESET} üìä Ver hist√≥rico de envios")
            print(f"  {Colors.CYAN}[6]{Colors.RESET} üîî Criar webhook para Slack")
            print(f"  {Colors.CYAN}[7]{Colors.RESET} üí¨ Criar webhook para Discord")
            print(f"  {Colors.CYAN}[8]{Colors.RESET} üíº Criar webhook para Teams")
            print(f"  {Colors.CYAN}[9]{Colors.RESET} üìà Estat√≠sticas dos webhooks")
            print(f"  {Colors.CYAN}[0]{Colors.RESET} ‚¨ÖÔ∏è  Voltar ao menu principal")
            
            choice = input(f"\n{Colors.YELLOW}‚û§ Sua escolha (0-9): {Colors.RESET}").strip()
            
            if choice == "0":
                break
            elif choice == "1":
                await self._add_webhook()
            elif choice == "2":
                await self._list_webhooks()
            elif choice == "3":
                await self._configure_webhook()
            elif choice == "4":
                await self._test_webhook()
            elif choice == "5":
                await self._show_webhook_history()
            elif choice == "6":
                await self._create_slack_webhook()
            elif choice == "7":
                await self._create_discord_webhook()
            elif choice == "8":
                await self._create_teams_webhook()
            elif choice == "9":
                await self._show_webhook_statistics()
            else:
                print(f"{Colors.RED}‚ùå Op√ß√£o inv√°lida.{Colors.RESET}")
                input(f"{Colors.DIM}Pressione Enter para continuar...{Colors.RESET}")
    
    async def _show_webhook_status(self) -> None:
        """Mostra status atual dos webhooks"""
        print(f"\n{Colors.CYAN}üìä STATUS ATUAL DOS WEBHOOKS:{Colors.RESET}")
        
        webhooks = self.config.get('webhooks', [])
        active_webhooks = [w for w in webhooks if w.get('enabled', True)]
        
        print(f"   üì° Total configurados: {len(webhooks)}")
        print(f"   ‚úÖ Ativos: {len(active_webhooks)}")
        print(f"   ‚ùå Inativos: {len(webhooks) - len(active_webhooks)}")
        
        if active_webhooks:
            print(f"\nüîî WEBHOOKS ATIVOS:")
            for webhook in active_webhooks[:3]:
                name = webhook.get('name', 'Sem nome')
                events = len(webhook.get('events', []))
                print(f"   ‚Ä¢ {name} - {events} evento(s)")
            
            if len(active_webhooks) > 3:
                print(f"   ... e mais {len(active_webhooks) - 3} webhooks")
    
    async def _add_webhook(self) -> None:
        """Adiciona novo webhook"""
        print(f"\n{Colors.GREEN}‚ûï ADICIONAR NOVO WEBHOOK{Colors.RESET}")
        print(f"{Colors.GRAY}Configure um novo webhook para receber notifica√ß√µes{Colors.RESET}\n")
        
        # Informa√ß√µes b√°sicas
        name = input(f"üìù Nome do webhook: ").strip()
        if not name:
            print(f"{Colors.RED}‚ùå Nome √© obrigat√≥rio.{Colors.RESET}")
            return
        
        url = input(f"üåê URL do webhook: ").strip()
        if not url:
            print(f"{Colors.RED}‚ùå URL √© obrigat√≥ria.{Colors.RESET}")
            return
        
        # Validar URL b√°sica
        if not (url.startswith('http://') or url.startswith('https://')):
            print(f"{Colors.RED}‚ùå URL deve come√ßar com http:// ou https://{Colors.RESET}")
            return
        
        # Selecionar eventos
        print(f"\n{Colors.CYAN}üì° SELECIONAR EVENTOS:{Colors.RESET}")
        print(f"   {Colors.GRAY}Escolha os eventos que devem disparar este webhook{Colors.RESET}\n")
        
        selected_events = []
        for i, (event_key, event_desc) in enumerate(self.event_types.items(), 1):
            response = input(f"   {event_desc} [S/n]: ").strip().lower()
            if response in ['', 's', 'sim', 'y', 'yes']:
                selected_events.append(event_key)
        
        if not selected_events:
            print(f"{Colors.RED}‚ùå Pelo menos um evento deve ser selecionado.{Colors.RESET}")
            return
        
        # Configura√ß√µes avan√ßadas
        print(f"\n{Colors.YELLOW}‚öôÔ∏è CONFIGURA√á√ïES AVAN√áADAS:{Colors.RESET}")
        
        # Filtros
        filter_companies = input(f"üè¢ Filtrar empresas espec√≠ficas (separadas por v√≠rgula, Enter=todas): ").strip()
        filter_keywords = input(f"üîç Filtrar palavras-chave no t√≠tulo (separadas por v√≠rgula, Enter=todas): ").strip()
        
        # Threshold
        min_jobs = input(f"üìä N√∫mero m√≠nimo de vagas para disparar (Enter=1): ").strip()
        try:
            min_jobs = int(min_jobs) if min_jobs else 1
        except ValueError:
            min_jobs = 1
        
        # Criar webhook
        webhook = {
            "id": self._generate_webhook_id(),
            "name": name,
            "url": url,
            "events": selected_events,
            "enabled": True,
            "created_at": datetime.now().isoformat(),
            "filters": {
                "companies": [c.strip() for c in filter_companies.split(',')] if filter_companies else [],
                "keywords": [k.strip() for k in filter_keywords.split(',')] if filter_keywords else [],
                "min_jobs": min_jobs
            },
            "retry_config": {
                "max_retries": 3,
                "retry_delay": 5
            },
            "stats": {
                "total_sent": 0,
                "total_failed": 0,
                "last_sent": None
            }
        }
        
        # Salvar
        self.config.setdefault('webhooks', []).append(webhook)
        self._save_config()
        
        print(f"\n{Colors.GREEN}‚úÖ Webhook '{name}' criado com sucesso!{Colors.RESET}")
        print(f"   üì° ID: {webhook['id']}")
        print(f"   üéØ Eventos: {len(selected_events)}")
        print(f"   üîî Status: Ativo")
        
        # Testar webhook
        test = input(f"\n{Colors.YELLOW}üß™ Testar webhook agora? [S/n]: {Colors.RESET}").strip().lower()
        if test in ['', 's', 'sim', 'y', 'yes']:
            await self._test_specific_webhook(webhook)
    
    async def _list_webhooks(self) -> None:
        """Lista todos os webhooks configurados"""
        print(f"\n{Colors.CYAN}üìã WEBHOOKS CONFIGURADOS{Colors.RESET}")
        print(f"{Colors.GRAY}{'‚ïê' * 80}{Colors.RESET}")
        
        webhooks = self.config.get('webhooks', [])
        
        if not webhooks:
            print(f"{Colors.YELLOW}‚ö†Ô∏è Nenhum webhook configurado ainda.{Colors.RESET}")
            print(f"   Use a op√ß√£o 1 para adicionar seu primeiro webhook.")
            input(f"\n{Colors.DIM}Pressione Enter para continuar...{Colors.RESET}")
            return
        
        for i, webhook in enumerate(webhooks, 1):
            status = "üü¢ Ativo" if webhook.get('enabled', True) else "üî¥ Inativo"
            stats = webhook.get('stats', {})
            
            print(f"\n{Colors.YELLOW}{i:2d}.{Colors.RESET} {webhook.get('name', 'Sem nome')}")
            print(f"     üì° ID: {webhook.get('id', 'N/A')}")
            print(f"     üåê URL: {webhook.get('url', 'N/A')[:60]}...")
            print(f"     üìä Status: {status}")
            print(f"     üéØ Eventos: {len(webhook.get('events', []))}")
            print(f"     üìà Enviados: {stats.get('total_sent', 0)} | Falhas: {stats.get('total_failed', 0)}")
            
            # Mostrar √∫ltimos eventos
            events = webhook.get('events', [])[:3]
            if events:
                event_names = [self.event_types.get(e, e) for e in events]
                print(f"     üîî Eventos: {', '.join(event_names)}")
        
        input(f"\n{Colors.DIM}Pressione Enter para continuar...{Colors.RESET}")
    
    async def _create_slack_webhook(self) -> None:
        """Criar webhook espec√≠fico para Slack"""
        print(f"\n{Colors.BLUE}üîî CONFIGURAR WEBHOOK SLACK{Colors.RESET}")
        print(f"{Colors.GRAY}Configure notifica√ß√µes para o Slack usando Incoming Webhooks{Colors.RESET}\n")
        
        print(f"{Colors.YELLOW}üìã INSTRU√á√ïES:{Colors.RESET}")
        print("1. Acesse https://api.slack.com/apps")
        print("2. Crie um novo app ou use um existente")
        print("3. V√° em 'Incoming Webhooks' e ative")
        print("4. Clique em 'Add New Webhook to Workspace'")
        print("5. Selecione o canal e copie a URL")
        print()
        
        webhook_url = input(f"üîó Cole a URL do webhook Slack: ").strip()
        if not webhook_url:
            print(f"{Colors.RED}‚ùå URL √© obrigat√≥ria.{Colors.RESET}")
            return
        
        channel = input(f"üì∫ Nome do canal (ex: #jobs): ").strip() or "#jobs"
        
        # Criar webhook Slack
        webhook = {
            "id": self._generate_webhook_id(),
            "name": f"Slack - {channel}",
            "url": webhook_url,
            "type": "slack",
            "events": ["new_jobs", "scraping_complete"],
            "enabled": True,
            "created_at": datetime.now().isoformat(),
            "filters": {"min_jobs": 1},
            "slack_config": {
                "channel": channel,
                "username": "Job Scraper Bot",
                "icon_emoji": ":robot_face:"
            },
            "retry_config": {"max_retries": 3, "retry_delay": 5},
            "stats": {"total_sent": 0, "total_failed": 0, "last_sent": None}
        }
        
        self.config.setdefault('webhooks', []).append(webhook)
        self._save_config()
        
        print(f"\n{Colors.GREEN}‚úÖ Webhook Slack configurado com sucesso!{Colors.RESET}")
        print(f"   üì∫ Canal: {channel}")
        print(f"   üîî Eventos: Novas vagas e scraping completo")
        
        # Testar
        await self._test_specific_webhook(webhook)
    
    async def _create_discord_webhook(self) -> None:
        """Criar webhook espec√≠fico para Discord"""
        print(f"\n{Colors.PURPLE}üí¨ CONFIGURAR WEBHOOK DISCORD{Colors.RESET}")
        print(f"{Colors.GRAY}Configure notifica√ß√µes para o Discord{Colors.RESET}\n")
        
        print(f"{Colors.YELLOW}üìã INSTRU√á√ïES:{Colors.RESET}")
        print("1. Abra o Discord e v√° para o canal desejado")
        print("2. Clique na engrenagem do canal > Integra√ß√µes")
        print("3. Clique em 'Criar Webhook'")
        print("4. Configure nome e avatar")
        print("5. Copie a URL do webhook")
        print()
        
        webhook_url = input(f"üîó Cole a URL do webhook Discord: ").strip()
        if not webhook_url:
            print(f"{Colors.RED}‚ùå URL √© obrigat√≥ria.{Colors.RESET}")
            return
        
        server_name = input(f"üéÆ Nome do servidor: ").strip() or "Discord Server"
        
        # Criar webhook Discord
        webhook = {
            "id": self._generate_webhook_id(),
            "name": f"Discord - {server_name}",
            "url": webhook_url,
            "type": "discord",
            "events": ["new_jobs", "daily_summary"],
            "enabled": True,
            "created_at": datetime.now().isoformat(),
            "filters": {"min_jobs": 1},
            "discord_config": {
                "username": "Job Scraper",
                "avatar_url": None
            },
            "retry_config": {"max_retries": 3, "retry_delay": 5},
            "stats": {"total_sent": 0, "total_failed": 0, "last_sent": None}
        }
        
        self.config.setdefault('webhooks', []).append(webhook)
        self._save_config()
        
        print(f"\n{Colors.GREEN}‚úÖ Webhook Discord configurado com sucesso!{Colors.RESET}")
        print(f"   üéÆ Servidor: {server_name}")
        print(f"   üîî Eventos: Novas vagas e resumo di√°rio")
        
        # Testar
        await self._test_specific_webhook(webhook)
    
    async def _test_webhook(self) -> None:
        """Testar webhook espec√≠fico"""
        webhooks = self.config.get('webhooks', [])
        
        if not webhooks:
            print(f"{Colors.YELLOW}‚ö†Ô∏è Nenhum webhook configurado para testar.{Colors.RESET}")
            input(f"{Colors.DIM}Pressione Enter para continuar...{Colors.RESET}")
            return
        
        print(f"\n{Colors.CYAN}üß™ TESTAR WEBHOOK{Colors.RESET}")
        print(f"   {Colors.GRAY}Selecione um webhook para testar:{Colors.RESET}\n")
        
        for i, webhook in enumerate(webhooks, 1):
            status = "üü¢" if webhook.get('enabled', True) else "üî¥"
            print(f"  {Colors.CYAN}[{i}]{Colors.RESET} {status} {webhook.get('name', 'Sem nome')}")
        
        print(f"  {Colors.CYAN}[0]{Colors.RESET} ‚¨ÖÔ∏è  Voltar")
        
        try:
            choice = input(f"\n{Colors.YELLOW}‚û§ Webhook para testar (1-{len(webhooks)}): {Colors.RESET}").strip()
            
            if choice == "0":
                return
            
            webhook_idx = int(choice) - 1
            if 0 <= webhook_idx < len(webhooks):
                await self._test_specific_webhook(webhooks[webhook_idx])
            else:
                print(f"{Colors.RED}‚ùå Op√ß√£o inv√°lida.{Colors.RESET}")
        except ValueError:
            print(f"{Colors.RED}‚ùå Entrada inv√°lida.{Colors.RESET}")
        
        input(f"\n{Colors.DIM}Pressione Enter para continuar...{Colors.RESET}")
    
    async def _test_specific_webhook(self, webhook: Dict) -> None:
        """Testa um webhook espec√≠fico"""
        print(f"\n{Colors.YELLOW}üß™ TESTANDO WEBHOOK: {webhook.get('name')}{Colors.RESET}")
        
        # Criar payload de teste
        test_payload = {
            "event_type": "test",
            "timestamp": datetime.now().isoformat(),
            "message": "üß™ Teste de webhook do Catho Job Scraper",
            "data": {
                "jobs_found": 5,
                "scraping_duration": "2 minutos",
                "test_mode": True
            }
        }
        
        # Adaptar payload para tipo espec√≠fico
        if webhook.get('type') == 'slack':
            payload = {
                "username": webhook.get('slack_config', {}).get('username', 'Job Scraper Bot'),
                "icon_emoji": webhook.get('slack_config', {}).get('icon_emoji', ':robot_face:'),
                "text": "üß™ *Teste de Webhook*",
                "attachments": [{
                    "color": "good",
                    "fields": [
                        {"title": "Sistema", "value": "Catho Job Scraper", "short": True},
                        {"title": "Status", "value": "‚úÖ Funcionando", "short": True},
                        {"title": "Teste", "value": "Webhook configurado corretamente!", "short": False}
                    ]
                }]
            }
        elif webhook.get('type') == 'discord':
            payload = {
                "username": webhook.get('discord_config', {}).get('username', 'Job Scraper'),
                "embeds": [{
                    "title": "üß™ Teste de Webhook",
                    "description": "Webhook configurado corretamente!",
                    "color": 0x00ff00,
                    "fields": [
                        {"name": "Sistema", "value": "Catho Job Scraper", "inline": True},
                        {"name": "Status", "value": "‚úÖ Funcionando", "inline": True}
                    ],
                    "timestamp": datetime.now().isoformat()
                }]
            }
        else:
            payload = test_payload
        
        # Enviar teste
        success = await self._send_webhook(webhook, payload)
        
        if success:
            print(f"{Colors.GREEN}‚úÖ Teste bem-sucedido!{Colors.RESET}")
            print(f"   üì° Webhook est√° funcionando corretamente")
        else:
            print(f"{Colors.RED}‚ùå Teste falhou!{Colors.RESET}")
            print(f"   üì° Verifique a URL e configura√ß√µes")
    
    async def _send_webhook(self, webhook: Dict, payload: Dict) -> bool:
        """Envia dados para um webhook"""
        try:
            # Tentar usar requests primeiro (mais comum)
            try:
                import requests
                response = requests.post(
                    webhook['url'],
                    json=payload,
                    timeout=10,
                    headers={'Content-Type': 'application/json'}
                )
                success = response.status_code < 400
            except ImportError:
                # Fallback para urllib se requests n√£o estiver dispon√≠vel
                data = json.dumps(payload).encode('utf-8')
                req = urllib.request.Request(
                    webhook['url'],
                    data=data,
                    headers={'Content-Type': 'application/json'}
                )
                
                try:
                    with urllib.request.urlopen(req, timeout=10) as response:
                        success = response.getcode() < 400
                except urllib.error.HTTPError as e:
                    success = e.code < 400
            
            # Atualizar estat√≠sticas
            stats = webhook.setdefault('stats', {})
            if success:
                stats['total_sent'] = stats.get('total_sent', 0) + 1
                stats['last_sent'] = datetime.now().isoformat()
                print(f"{Colors.GREEN}‚úÖ Webhook enviado com sucesso!{Colors.RESET}")
            else:
                stats['total_failed'] = stats.get('total_failed', 0) + 1
                print(f"{Colors.YELLOW}‚ö†Ô∏è Webhook retornou status de erro{Colors.RESET}")
            
            self._save_config()
            return success
                    
        except Exception as e:
            print(f"{Colors.RED}‚ùå Erro ao enviar webhook: {e}{Colors.RESET}")
            
            # Atualizar estat√≠sticas de falha
            stats = webhook.setdefault('stats', {})
            stats['total_failed'] = stats.get('total_failed', 0) + 1
            self._save_config()
            
            return False
    
    def _generate_webhook_id(self) -> str:
        """Gera ID √∫nico para webhook"""
        timestamp = str(int(time.time()))
        random_str = hashlib.md5(f"{timestamp}{time.time()}".encode()).hexdigest()[:8]
        return f"webhook_{timestamp}_{random_str}"
    
    def _load_config(self) -> Dict:
        """Carrega configura√ß√£o dos webhooks"""
        try:
            if self.config_file.exists():
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception:
            pass
        return {"webhooks": []}
    
    def _save_config(self) -> None:
        """Salva configura√ß√£o dos webhooks"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar configura√ß√£o: {e}")
    
    async def _show_webhook_history(self) -> None:
        """Mostra hist√≥rico de envios de webhooks"""
        print(f"\n{Colors.CYAN}üìä HIST√ìRICO DE WEBHOOKS{Colors.RESET}")
        print("Esta funcionalidade ser√° implementada para mostrar logs detalhados.")
        input(f"\n{Colors.DIM}Pressione Enter para continuar...{Colors.RESET}")
    
    async def _configure_webhook(self) -> None:
        """Configura webhook existente"""
        print(f"\n{Colors.YELLOW}‚öôÔ∏è CONFIGURAR WEBHOOK EXISTENTE{Colors.RESET}")
        print("Esta funcionalidade permitir√° editar webhooks existentes.")
        input(f"\n{Colors.DIM}Pressione Enter para continuar...{Colors.RESET}")
    
    async def _create_teams_webhook(self) -> None:
        """Criar webhook para Microsoft Teams"""
        print(f"\n{Colors.BLUE}üíº CONFIGURAR WEBHOOK TEAMS{Colors.RESET}")
        print("Esta funcionalidade ser√° implementada para Microsoft Teams.")
        input(f"\n{Colors.DIM}Pressione Enter para continuar...{Colors.RESET}")
    
    async def _show_webhook_statistics(self) -> None:
        """Mostra estat√≠sticas dos webhooks"""
        print(f"\n{Colors.CYAN}üìà ESTAT√çSTICAS DOS WEBHOOKS{Colors.RESET}")
        
        webhooks = self.config.get('webhooks', [])
        if not webhooks:
            print(f"{Colors.YELLOW}‚ö†Ô∏è Nenhum webhook configurado.{Colors.RESET}")
            input(f"\n{Colors.DIM}Pressione Enter para continuar...{Colors.RESET}")
            return
        
        total_sent = sum(w.get('stats', {}).get('total_sent', 0) for w in webhooks)
        total_failed = sum(w.get('stats', {}).get('total_failed', 0) for w in webhooks)
        
        print(f"üìä RESUMO GERAL:")
        print(f"   üì° Total de webhooks: {len(webhooks)}")
        print(f"   ‚úÖ Envios bem-sucedidos: {total_sent}")
        print(f"   ‚ùå Envios falharam: {total_failed}")
        print(f"   üìà Taxa de sucesso: {(total_sent/(total_sent+total_failed)*100) if (total_sent+total_failed) > 0 else 0:.1f}%")
        
        input(f"\n{Colors.DIM}Pressione Enter para continuar...{Colors.RESET}")
    
    def _apply_webhook_filters(self, jobs: List[Dict], filters: Dict) -> List[Dict]:
        """Aplica filtros de webhook nas vagas"""
        filtered_jobs = jobs
        
        # Filtro por empresas
        if filters.get('companies'):
            companies = [c.lower() for c in filters['companies']]
            filtered_jobs = [
                job for job in filtered_jobs 
                if any(company in job.get('empresa', '').lower() for company in companies)
            ]
        
        # Filtro por palavras-chave no t√≠tulo
        if filters.get('keywords'):
            keywords = [k.lower() for k in filters['keywords']]
            filtered_jobs = [
                job for job in filtered_jobs 
                if any(keyword in job.get('titulo', '').lower() for keyword in keywords)
            ]
        
        return filtered_jobs
    
    def _create_job_notification_payload(self, webhook: Dict, jobs: List[Dict]) -> Dict:
        """Cria payload de notifica√ß√£o para novas vagas"""
        webhook_type = webhook.get('type', 'generic')
        
        if webhook_type == 'slack':
            return {
                "username": webhook.get('slack_config', {}).get('username', 'Job Scraper Bot'),
                "icon_emoji": webhook.get('slack_config', {}).get('icon_emoji', ':briefcase:'),
                "text": f"üÜï *{len(jobs)} novas vagas encontradas!*",
                "attachments": [{
                    "color": "good",
                    "fields": [
                        {"title": "Total de vagas", "value": str(len(jobs)), "short": True},
                        {"title": "Timestamp", "value": datetime.now().strftime('%d/%m/%Y %H:%M'), "short": True}
                    ] + [
                        {"title": f"üìã {job.get('titulo', 'N/A')}", "value": f"üè¢ {job.get('empresa', 'N/A')}", "short": False}
                        for job in jobs[:5]
                    ] + ([{"title": "...", "value": f"E mais {len(jobs)-5} vagas", "short": False}] if len(jobs) > 5 else [])
                }]
            }
        
        elif webhook_type == 'discord':
            return {
                "username": webhook.get('discord_config', {}).get('username', 'Job Scraper'),
                "embeds": [{
                    "title": f"üÜï {len(jobs)} novas vagas encontradas!",
                    "description": f"Foram encontradas {len(jobs)} novas vagas de emprego.",
                    "color": 0x00ff00,
                    "fields": [
                        {"name": "üìä Total", "value": str(len(jobs)), "inline": True},
                        {"name": "‚è∞ Hor√°rio", "value": datetime.now().strftime('%H:%M'), "inline": True}
                    ] + [
                        {"name": f"üìã {job.get('titulo', 'N/A')[:50]}", "value": f"üè¢ {job.get('empresa', 'N/A')}", "inline": False}
                        for job in jobs[:3]
                    ],
                    "timestamp": datetime.now().isoformat(),
                    "footer": {"text": "Catho Job Scraper"}
                }]
            }
        
        else:
            # Formato gen√©rico
            return {
                "event_type": "new_jobs",
                "timestamp": datetime.now().isoformat(),
                "jobs_count": len(jobs),
                "jobs": [
                    {
                        "title": job.get('titulo', 'N/A'),
                        "company": job.get('empresa', 'N/A'),
                        "location": job.get('localizacao', 'N/A'),
                        "link": job.get('link', 'N/A')
                    }
                    for job in jobs[:10]  # Limitar para n√£o sobrecarregar
                ]
            }


# Fun√ß√£o para integra√ß√£o com outros m√≥dulos
async def notify_new_jobs(jobs: List[Dict]) -> None:
    """Notifica webhooks sobre novas vagas encontradas"""
    try:
        handler = WebhookHandler()
        webhooks = handler.config.get('webhooks', [])
        
        for webhook in webhooks:
            if not webhook.get('enabled', True):
                continue
                
            if 'new_jobs' not in webhook.get('events', []):
                continue
            
            # Aplicar filtros
            filtered_jobs = handler._apply_webhook_filters(jobs, webhook.get('filters', {}))
            
            if len(filtered_jobs) >= webhook.get('filters', {}).get('min_jobs', 1):
                payload = handler._create_job_notification_payload(webhook, filtered_jobs)
                await handler._send_webhook(webhook, payload)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao enviar notifica√ß√µes webhook: {e}")


async def notify_scraping_complete(total_jobs: int, duration: str) -> None:
    """Notifica webhooks sobre conclus√£o do scraping"""
    try:
        handler = WebhookHandler()
        webhooks = handler.config.get('webhooks', [])
        
        for webhook in webhooks:
            if not webhook.get('enabled', True):
                continue
                
            if 'scraping_complete' not in webhook.get('events', []):
                continue
            
            # Criar payload baseado no tipo
            webhook_type = webhook.get('type', 'generic')
            
            if webhook_type == 'slack':
                payload = {
                    "username": webhook.get('slack_config', {}).get('username', 'Job Scraper Bot'),
                    "icon_emoji": ":white_check_mark:",
                    "text": "‚úÖ *Scraping conclu√≠do com sucesso!*",
                    "attachments": [{
                        "color": "good",
                        "fields": [
                            {"title": "Total de vagas", "value": str(total_jobs), "short": True},
                            {"title": "Dura√ß√£o", "value": duration, "short": True},
                            {"title": "Status", "value": "‚úÖ Completo", "short": True}
                        ]
                    }]
                }
            else:
                payload = {
                    "event_type": "scraping_complete",
                    "timestamp": datetime.now().isoformat(),
                    "total_jobs": total_jobs,
                    "duration": duration,
                    "status": "success"
                }
            
            await handler._send_webhook(webhook, payload)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao enviar notifica√ß√£o de conclus√£o: {e}")


# Fun√ß√£o para usar no menu principal
async def manage_webhooks():
    """Fun√ß√£o principal para gerenciamento de webhooks"""
    handler = WebhookHandler()
    await handler.manage_webhooks()