"""
Analisador de Sentimento para Descri√ß√µes de Vagas
=================================================

Analisa o tom e sentimento das descri√ß√µes para identificar:
- Ambiente de trabalho (positivo/negativo)
- Cultura da empresa
- Urg√™ncia da contrata√ß√£o
- Benef√≠cios e vantagens
"""

import re
import json
import numpy as np
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from collections import Counter
import joblib
from pathlib import Path


@dataclass
class SentimentScore:
    """Scores de sentimento"""
    positive: float
    negative: float
    neutral: float
    
    @property
    def overall(self) -> str:
        """Sentimento predominante"""
        scores = {
            'positive': self.positive,
            'negative': self.negative,
            'neutral': self.neutral
        }
        return max(scores, key=scores.get)
    
    @property
    def confidence(self) -> float:
        """Confian√ßa na classifica√ß√£o"""
        return max(self.positive, self.negative, self.neutral)


class SentimentAnalyzer:
    """
    Analisador de sentimento especializado em vagas de emprego
    
    Caracter√≠sticas analisadas:
    - Tom geral da descri√ß√£o
    - Palavras positivas vs negativas
    - Urg√™ncia e press√£o
    - Benef√≠cios oferecidos
    - Cultura organizacional
    """
    
    def __init__(self):
        # Dicion√°rios de palavras por categoria
        self.lexicons = {
            'positive': {
                'ambiente': ['din√¢mico', 'inovador', 'colaborativo', 'descontra√≠do', 
                           'flex√≠vel', 'moderno', 'agrad√°vel', 'motivador', 'inspirador'],
                'crescimento': ['crescimento', 'desenvolvimento', 'carreira', 'evolu√ß√£o',
                              'aprendizado', 'capacita√ß√£o', 'mentoria', 'treinamento'],
                'benef√≠cios': ['benef√≠cios', 'vantagens', 'b√¥nus', 'premia√ß√£o', 'plr',
                              'home office', 'flexibilidade', 'vale', 'conv√™nio', 
                              'gympass', 'plano de sa√∫de'],
                'cultura': ['equil√≠brio', 'work-life balance', 'qualidade de vida',
                          'diversidade', 'inclus√£o', 'respeito', 'reconhecimento'],
                'oportunidade': ['oportunidade', 'desafio', 'impacto', 'diferen√ßa',
                               'contribuir', 'transformar', 'liderar', 'construir']
            },
            'negative': {
                'press√£o': ['urgente', 'imediato', 'press√£o', 'prazo apertado', 
                          'alta demanda', 'estressante', 'corrido'],
                'exig√™ncias': ['imprescind√≠vel', 'obrigat√≥rio', 'exige-se', 'fundamental',
                             'indispens√°vel', 'rigoroso', 'estrito'],
                'sobrecarga': ['multitarefas', 'ac√∫mulo', 'sobrecarga', 'hora extra',
                             'disponibilidade total', 'dedica√ß√£o exclusiva'],
                'ambiente': ['tradicional', 'hier√°rquico', 'r√≠gido', 'conservador',
                           'burocr√°tico', 'formal'],
                'indefinido': ['a combinar', 'n√£o informado', 'vari√°vel', 'depende']
            },
            'urgency': {
                'high': ['urgente', 'imediato', 'asap', 'in√≠cio imediato', 
                        'vaga emergencial', 'com urg√™ncia'],
                'medium': ['breve', 'em breve', 'pr√≥ximas semanas', 'rapidamente'],
                'low': ['sem pressa', 'processo seletivo', 'etapas', 'an√°lise']
            }
        }
        
        # Pesos para diferentes aspectos
        self.aspect_weights = {
            'benef√≠cios': 1.5,      # Benef√≠cios t√™m peso maior
            'cultura': 1.3,         # Cultura positiva √© importante
            'crescimento': 1.2,     # Oportunidades de crescimento
            'ambiente': 1.0,        # Ambiente de trabalho
            'press√£o': -1.5,        # Press√£o negativa tem peso maior
            'sobrecarga': -1.3,     # Sobrecarga √© muito negativa
            'exig√™ncias': -0.8      # Muitas exig√™ncias
        }
        
        # Emojis e sua polaridade
        self.emoji_sentiment = {
            'positive': ['üòä', 'üöÄ', 'üí™', 'üåü', '‚ú®', 'üéØ', 'üí°', 'üèÜ', 'üëè', '‚ù§Ô∏è'],
            'negative': ['üòì', 'üò∞', '‚ö†Ô∏è', 'üî•', '‚è∞', 'üò§', 'üò©'],
            'neutral': ['üìç', 'üìß', 'üì±', 'üíª', 'üè¢', 'üìä', 'üìà']
        }
        
        # Padr√µes de regex
        self.patterns = {
            'salary_mentioned': re.compile(r'sal[√°a]rio|remunera[√ßc][√£a]o|CLT|PJ|faixa', re.I),
            'benefits_section': re.compile(r'benef[√≠i]cios|vantagens|oferecemos|diferenciais', re.I),
            'requirements_section': re.compile(r'requisitos|exig[√™e]ncias|precisa|necess[√°a]rio', re.I),
            'company_culture': re.compile(r'cultura|valores|miss[√£a]o|prop[√≥o]sito', re.I)
        }
    
    def analyze(self, text: str, title: str = "") -> Dict[str, any]:
        """
        Analisa o sentimento de uma descri√ß√£o de vaga
        
        Args:
            text: Descri√ß√£o da vaga
            title: T√≠tulo da vaga (opcional)
            
        Returns:
            An√°lise completa de sentimento
        """
        full_text = f"{title} {text}".lower()
        
        # An√°lise b√°sica de sentimento
        sentiment_scores = self._calculate_sentiment_scores(full_text)
        
        # An√°lise de aspectos espec√≠ficos
        aspects = self._analyze_aspects(full_text)
        
        # Detectar urg√™ncia
        urgency = self._detect_urgency(full_text)
        
        # Analisar benef√≠cios
        benefits_score = self._analyze_benefits(full_text)
        
        # Analisar cultura
        culture_indicators = self._analyze_culture(full_text)
        
        # Calcular score geral
        overall_score = self._calculate_overall_score(
            sentiment_scores, aspects, benefits_score
        )
        
        # Gerar insights
        insights = self._generate_insights(
            sentiment_scores, aspects, urgency, 
            benefits_score, culture_indicators
        )
        
        return {
            'sentiment': sentiment_scores.overall,
            'scores': {
                'positive': sentiment_scores.positive,
                'negative': sentiment_scores.negative,
                'neutral': sentiment_scores.neutral
            },
            'confidence': sentiment_scores.confidence,
            'aspects': aspects,
            'urgency': urgency,
            'benefits_score': benefits_score,
            'culture_indicators': culture_indicators,
            'overall_score': overall_score,
            'insights': insights,
            'recommendation': self._generate_recommendation(overall_score)
        }
    
    def _calculate_sentiment_scores(self, text: str) -> SentimentScore:
        """Calcula scores b√°sicos de sentimento"""
        positive_count = 0
        negative_count = 0
        total_relevant_words = 0
        
        # Contar palavras positivas
        for category, words in self.lexicons['positive'].items():
            for word in words:
                count = text.lower().count(word.lower())
                if count > 0:
                    weight = self.aspect_weights.get(category, 1.0)
                    positive_count += count * abs(weight)
                    total_relevant_words += count
        
        # Contar palavras negativas
        for category, words in self.lexicons['negative'].items():
            for word in words:
                count = text.lower().count(word.lower())
                if count > 0:
                    weight = self.aspect_weights.get(category, -1.0)
                    negative_count += count * abs(weight)
                    total_relevant_words += count
        
        # Contar emojis
        for emoji_type, emojis in self.emoji_sentiment.items():
            for emoji in emojis:
                if emoji in text:
                    if emoji_type == 'positive':
                        positive_count += 2  # Emojis t√™m peso maior
                    elif emoji_type == 'negative':
                        negative_count += 2
                    total_relevant_words += 1
        
        # Calcular propor√ß√µes
        if total_relevant_words == 0:
            return SentimentScore(0.0, 0.0, 1.0)  # Neutro por padr√£o
        
        positive_ratio = positive_count / (positive_count + negative_count + 1)
        negative_ratio = negative_count / (positive_count + negative_count + 1)
        
        # Ajustar para somar 1.0
        neutral_ratio = max(0, 1.0 - positive_ratio - negative_ratio)
        
        # Normalizar
        total = positive_ratio + negative_ratio + neutral_ratio
        if total > 0:
            positive_ratio /= total
            negative_ratio /= total
            neutral_ratio /= total
        
        return SentimentScore(
            positive=round(positive_ratio, 3),
            negative=round(negative_ratio, 3),
            neutral=round(neutral_ratio, 3)
        )
    
    def _analyze_aspects(self, text: str) -> Dict[str, Dict]:
        """Analisa aspectos espec√≠ficos da vaga"""
        aspects = {}
        
        # Analisar cada categoria
        for sentiment_type in ['positive', 'negative']:
            for category, words in self.lexicons[sentiment_type].items():
                found_words = []
                score = 0
                
                for word in words:
                    if word.lower() in text:
                        found_words.append(word)
                        score += 1
                
                if found_words:
                    aspects[category] = {
                        'sentiment': sentiment_type,
                        'score': score,
                        'words_found': found_words[:5],  # Top 5
                        'weight': self.aspect_weights.get(category, 1.0)
                    }
        
        return aspects
    
    def _detect_urgency(self, text: str) -> Dict[str, any]:
        """Detecta n√≠vel de urg√™ncia na contrata√ß√£o"""
        urgency_scores = {
            'high': 0,
            'medium': 0,
            'low': 0
        }
        
        for level, keywords in self.lexicons['urgency'].items():
            for keyword in keywords:
                if keyword.lower() in text:
                    urgency_scores[level] += 1
        
        # Determinar n√≠vel predominante
        max_level = max(urgency_scores, key=urgency_scores.get)
        total_indicators = sum(urgency_scores.values())
        
        return {
            'level': max_level if total_indicators > 0 else 'medium',
            'indicators': urgency_scores,
            'confidence': urgency_scores[max_level] / max(total_indicators, 1)
        }
    
    def _analyze_benefits(self, text: str) -> Dict[str, any]:
        """Analisa benef√≠cios mencionados"""
        benefits_found = []
        benefit_keywords = self.lexicons['positive']['benef√≠cios']
        
        for benefit in benefit_keywords:
            if benefit.lower() in text:
                benefits_found.append(benefit)
        
        # Verificar se h√° se√ß√£o de benef√≠cios
        has_benefits_section = bool(self.patterns['benefits_section'].search(text))
        
        # Calcular score
        score = len(benefits_found)
        if has_benefits_section:
            score *= 1.5  # Bonus por ter se√ß√£o dedicada
        
        return {
            'score': min(score / 10, 1.0),  # Normalizado 0-1
            'count': len(benefits_found),
            'benefits': benefits_found[:10],  # Top 10
            'has_section': has_benefits_section
        }
    
    def _analyze_culture(self, text: str) -> Dict[str, any]:
        """Analisa indicadores de cultura organizacional"""
        culture_positive = []
        culture_negative = []
        
        # Palavras positivas de cultura
        for word in self.lexicons['positive']['cultura']:
            if word.lower() in text:
                culture_positive.append(word)
        
        # Palavras negativas de ambiente
        for word in self.lexicons['negative']['ambiente']:
            if word.lower() in text:
                culture_negative.append(word)
        
        # Verificar men√ß√£o expl√≠cita de cultura
        mentions_culture = bool(self.patterns['company_culture'].search(text))
        
        # Calcular score de cultura
        culture_score = (len(culture_positive) - len(culture_negative)) / 10
        culture_score = max(-1, min(1, culture_score))  # Limitar entre -1 e 1
        
        return {
            'score': culture_score,
            'positive_indicators': culture_positive,
            'negative_indicators': culture_negative,
            'mentions_culture': mentions_culture,
            'assessment': self._assess_culture(culture_score)
        }
    
    def _assess_culture(self, score: float) -> str:
        """Avalia a cultura com base no score"""
        if score >= 0.5:
            return "Muito Positiva"
        elif score >= 0.2:
            return "Positiva"
        elif score >= -0.2:
            return "Neutra"
        elif score >= -0.5:
            return "Negativa"
        else:
            return "Muito Negativa"
    
    def _calculate_overall_score(self, sentiment: SentimentScore,
                                aspects: Dict, benefits: Dict) -> float:
        """Calcula score geral da vaga (0-10)"""
        # Base score do sentimento
        base_score = (sentiment.positive - sentiment.negative) * 5 + 5
        
        # Ajustar por aspectos
        aspect_adjustment = 0
        for aspect, data in aspects.items():
            weight = data['weight']
            if data['sentiment'] == 'positive':
                aspect_adjustment += weight * 0.5
            else:
                aspect_adjustment += weight * 0.5  # weight j√° √© negativo
        
        # Ajustar por benef√≠cios
        benefits_adjustment = benefits['score'] * 2
        
        # Score final
        final_score = base_score + aspect_adjustment + benefits_adjustment
        
        # Limitar entre 0 e 10
        return max(0, min(10, final_score))
    
    def _generate_insights(self, sentiment: SentimentScore, aspects: Dict,
                          urgency: Dict, benefits: Dict, culture: Dict) -> List[str]:
        """Gera insights sobre a vaga"""
        insights = []
        
        # Insight sobre sentimento geral
        if sentiment.positive > 0.6:
            insights.append("‚úÖ Descri√ß√£o muito positiva e acolhedora")
        elif sentiment.negative > 0.6:
            insights.append("‚ö†Ô∏è Tom da descri√ß√£o pode afastar candidatos")
        
        # Insights sobre aspectos
        if 'crescimento' in aspects and aspects['crescimento']['sentiment'] == 'positive':
            insights.append("üìà Forte √™nfase em desenvolvimento profissional")
        
        if 'press√£o' in aspects:
            insights.append("‚è∞ Ambiente aparenta ter alta press√£o")
        
        if 'benef√≠cios' in aspects and aspects['benef√≠cios']['score'] > 3:
            insights.append("üéÅ Pacote de benef√≠cios atrativo")
        
        # Insight sobre urg√™ncia
        if urgency['level'] == 'high':
            insights.append("üö® Contrata√ß√£o urgente - processo pode ser acelerado")
        
        # Insight sobre cultura
        if culture['score'] > 0.5:
            insights.append("üåü Cultura organizacional aparenta ser muito positiva")
        elif culture['score'] < -0.3:
            insights.append("üè¢ Ambiente mais tradicional e hier√°rquico")
        
        # Insight sobre transpar√™ncia
        if not self.patterns['salary_mentioned'].search(sentiment.overall):
            insights.append("üí∞ Sal√°rio n√£o mencionado - perguntar na entrevista")
        
        return insights
    
    def _generate_recommendation(self, overall_score: float) -> str:
        """Gera recomenda√ß√£o baseada no score"""
        if overall_score >= 8:
            return "Altamente Recomendada - Excelente oportunidade"
        elif overall_score >= 6.5:
            return "Recomendada - Boa oportunidade"
        elif overall_score >= 5:
            return "Neutra - Avaliar com cuidado"
        elif overall_score >= 3.5:
            return "Cautela - Alguns pontos negativos"
        else:
            return "N√£o Recomendada - Muitos aspectos negativos"
    
    def batch_analyze(self, jobs: List[Dict]) -> List[Dict]:
        """Analisa sentimento de m√∫ltiplas vagas"""
        results = []
        
        for job in jobs:
            title = job.get('titulo', '')
            description = job.get('descricao', '')
            
            if description:
                analysis = self.analyze(description, title)
                
                # Adicionar an√°lise ao job
                job_with_sentiment = job.copy()
                job_with_sentiment['sentiment_analysis'] = analysis
                job_with_sentiment['sentiment_score'] = analysis['overall_score']
                job_with_sentiment['sentiment_recommendation'] = analysis['recommendation']
                
                results.append(job_with_sentiment)
            else:
                results.append(job)
        
        return results
    
    def get_statistics(self, analyzed_jobs: List[Dict]) -> Dict:
        """Gera estat√≠sticas sobre jobs analisados"""
        if not analyzed_jobs:
            return {}
        
        sentiments = []
        scores = []
        urgencies = []
        cultures = []
        
        for job in analyzed_jobs:
            if 'sentiment_analysis' in job:
                analysis = job['sentiment_analysis']
                sentiments.append(analysis['sentiment'])
                scores.append(analysis['overall_score'])
                urgencies.append(analysis['urgency']['level'])
                cultures.append(analysis['culture_indicators']['assessment'])
        
        if not sentiments:
            return {}
        
        # Calcular estat√≠sticas
        sentiment_dist = Counter(sentiments)
        urgency_dist = Counter(urgencies)
        culture_dist = Counter(cultures)
        avg_score = np.mean(scores)
        
        return {
            'total_analyzed': len(sentiments),
            'sentiment_distribution': dict(sentiment_dist),
            'average_score': round(avg_score, 2),
            'score_distribution': {
                'excellent': len([s for s in scores if s >= 8]),
                'good': len([s for s in scores if 6.5 <= s < 8]),
                'neutral': len([s for s in scores if 5 <= s < 6.5]),
                'caution': len([s for s in scores if 3.5 <= s < 5]),
                'not_recommended': len([s for s in scores if s < 3.5])
            },
            'urgency_distribution': dict(urgency_dist),
            'culture_distribution': dict(culture_dist),
            'top_positive_companies': self._get_top_companies(analyzed_jobs, 'positive'),
            'top_negative_companies': self._get_top_companies(analyzed_jobs, 'negative')
        }
    
    def _get_top_companies(self, jobs: List[Dict], 
                          sentiment_type: str, limit: int = 5) -> List[Tuple[str, float]]:
        """Identifica empresas com melhor/pior sentimento"""
        company_scores = {}
        company_counts = {}
        
        for job in jobs:
            company = job.get('empresa', 'N/A')
            if company != 'N/A' and 'sentiment_analysis' in job:
                score = job['sentiment_analysis']['overall_score']
                
                if company not in company_scores:
                    company_scores[company] = []
                company_scores[company].append(score)
        
        # Calcular m√©dias
        company_avg = {
            company: np.mean(scores)
            for company, scores in company_scores.items()
            if len(scores) >= 2  # M√≠nimo 2 vagas para ser relevante
        }
        
        # Ordenar
        if sentiment_type == 'positive':
            sorted_companies = sorted(
                company_avg.items(), 
                key=lambda x: x[1], 
                reverse=True
            )
        else:
            sorted_companies = sorted(
                company_avg.items(), 
                key=lambda x: x[1]
            )
        
        return sorted_companies[:limit]


# Exemplo de uso
if __name__ == "__main__":
    analyzer = SentimentAnalyzer()
    
    # Exemplo positivo
    positive_example = """
    Junte-se ao nosso time incr√≠vel! üöÄ
    
    Somos uma startup em crescimento acelerado, com ambiente descontra√≠do
    e cultura de inova√ß√£o. Oferecemos:
    
    ‚úÖ Sal√°rio competitivo + Stock Options
    ‚úÖ Home office flex√≠vel
    ‚úÖ Plano de sa√∫de premium
    ‚úÖ Gympass e aux√≠lio bem-estar
    ‚úÖ Budget para educa√ß√£o
    ‚úÖ Hor√°rio flex√≠vel
    
    Buscamos pessoas que queiram fazer a diferen√ßa e crescer conosco!
    Processo seletivo humanizado e r√°pido.
    """
    
    # Exemplo negativo
    negative_example = """
    URGENTE - Vaga para in√≠cio IMEDIATO
    
    Exige-se total disponibilidade e dedica√ß√£o exclusiva.
    Ambiente de alta press√£o e prazos apertados.
    Necess√°rio experi√™ncia comprovada em multitarefas.
    
    Requisitos obrigat√≥rios:
    - Disponibilidade para horas extras
    - Trabalho sob press√£o constante
    - Resili√™ncia para ambiente tradicional
    
    Sal√°rio a combinar.
    """
    
    print("=== An√°lise Positiva ===")
    result1 = analyzer.analyze(positive_example, "Desenvolvedor Full Stack")
    print(f"Sentimento: {result1['sentiment']}")
    print(f"Score: {result1['overall_score']:.1f}/10")
    print(f"Recomenda√ß√£o: {result1['recommendation']}")
    print(f"Insights: {result1['insights']}")
    
    print("\n=== An√°lise Negativa ===")
    result2 = analyzer.analyze(negative_example, "Analista de Sistemas")
    print(f"Sentimento: {result2['sentiment']}")
    print(f"Score: {result2['overall_score']:.1f}/10")
    print(f"Recomenda√ß√£o: {result2['recommendation']}")
    print(f"Insights: {result2['insights']}")