#!/usr/bin/env python3
"""
Teste de integra√ß√£o do sistema de valida√ß√£o com dados realistas
Simula um scraping real e mostra a valida√ß√£o em a√ß√£o
"""

import sys
import os
import json

# Adicionar diret√≥rio pai ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.data_validator import data_validator


def create_realistic_test_data():
    """Cria dados de teste realistas baseados em cen√°rios reais"""
    return [
        # ‚úÖ Vaga perfeita
        {
            'titulo': 'Senior Python Developer',
            'empresa': 'TechCorp Solutions Ltda',
            'salario': 'R$ 12.000 - R$ 18.000',
            'localizacao': 'S√£o Paulo - SP',
            'data_publicacao': 'h√° 3 dias',
            'descricao': 'Buscamos desenvolvedor Python s√™nior para atuar com Django, FastAPI e microsservi√ßos. Experi√™ncia com AWS e Docker s√£o diferenciais.',
            'requisitos': 'Gradua√ß√£o em TI, 5+ anos Python, Django, FastAPI, conhecimento em AWS',
            'beneficios': 'Vale refei√ß√£o R$ 40/dia, plano de sa√∫de Bradesco, home office flex√≠vel',
            'nivel_experiencia': 'S√™nior',
            'modalidade': 'Home Office'
        },
        
        # ‚ö†Ô∏è Vaga com problemas menores (corrig√≠veis)
        {
            'titulo': 'DESENVOLVEDOR JAVA JUNIOR',  # Caps lock
            'empresa': 'JavaSoft',
            'salario': 'R$4500 a R$6000',  # Formato irregular
            'localizacao': 'remoto',  # N√£o padronizado
            'data_publicacao': 'publicada ontem',
            'descricao': 'Oportunidade para desenvolvedor Java iniciante trabalhar com Spring Boot e microservi√ßos.',
            'requisitos': 'Forma√ß√£o em Ci√™ncia da Computa√ß√£o, conhecimento em Java e Spring',
            'beneficios': 'Vale transporte, vale alimenta√ß√£o',
            'nivel_experiencia': 'J√∫nior',
            'modalidade': 'remoto'  # N√£o padronizado
        },
        
        # ‚ùå Vaga com dados inv√°lidos
        {
            'titulo': 'Dev',  # Muito curto
            'empresa': 'N√£o informada',  # Inv√°lida
            'salario': 'R$ 200.000',  # Muito alto
            'localizacao': 'X',  # Muito curta
            'data_publicacao': '2025-12-31',  # Data futura
            'descricao': 'Job',  # Muito curta
            'requisitos': 'Req',  # Muito curtos
            'beneficios': 'Ben',  # Muito curtos
            'nivel_experiencia': 'Expert Level 999',  # Inv√°lido
            'modalidade': 'Teletransporte'  # Inv√°lido
        },
        
        # üîç Vaga suspeita (spam)
        {
            'titulo': 'URGENTE!!! GANHE R$ 50.000!!! CLIQUE AQUI!!!',
            'empresa': 'Empresa Confidencial',
            'salario': 'R$ 50.000',
            'localizacao': 'Todo Brasil',
            'data_publicacao': 'h√° 1 dia',
            'descricao': 'OPORTUNIDADE √öNICA!!! Trabalhe de casa e ganhe muito dinheiro!!! CLIQUE AGORA!!!',
            'requisitos': 'Apenas boa vontade e dedica√ß√£o',
            'beneficios': 'Dinheiro f√°cil, liberdade total',
            'nivel_experiencia': 'Qualquer n√≠vel',
            'modalidade': 'Home Office'
        },
        
        # üìä Vaga com sal√°rio an√¥malo
        {
            'titulo': 'Estagi√°rio de Desenvolvimento',
            'empresa': 'StartupXYZ',
            'salario': 'R$ 25.000',  # Muito alto para estagi√°rio
            'localizacao': 'S√£o Paulo - SP',
            'data_publicacao': 'h√° 5 dias',
            'descricao': 'Vaga de est√°gio em desenvolvimento web com foco em React e Node.js.',
            'requisitos': 'Cursando Ci√™ncia da Computa√ß√£o, conhecimento b√°sico em JavaScript',
            'beneficios': 'Vale refei√ß√£o, vale transporte',
            'nivel_experiencia': 'Estagi√°rio',
            'modalidade': 'H√≠brido'
        },
        
        # ‚ú® Vaga internacional (formato diferente)
        {
            'titulo': 'Full Stack Developer',
            'empresa': 'GlobalTech Inc.',
            'salario': 'USD 8,000 - USD 12,000',  # Formato diferente
            'localizacao': 'Remote',
            'data_publicacao': '2024-06-15',  # Formato de data diferente
            'descricao': 'We are looking for a talented full stack developer to join our international team.',
            'requisitos': 'Bachelor in Computer Science, 3+ years experience with React and Node.js',
            'beneficios': 'Health insurance, stock options, flexible working hours',
            'nivel_experiencia': '3-5 years',
            'modalidade': 'Remote'
        }
    ]


def test_validation_step_by_step():
    """Testa valida√ß√£o passo a passo mostrando cada etapa"""
    print("üß™ TESTE DETALHADO DO SISTEMA DE VALIDA√á√ÉO")
    print("=" * 60)
    
    # Criar dados de teste
    test_jobs = create_realistic_test_data()
    print(f"üìã Dados de teste criados: {len(test_jobs)} vagas")
    print("   ‚úÖ 1 vaga perfeita")
    print("   ‚ö†Ô∏è 1 vaga com problemas menores")
    print("   ‚ùå 1 vaga com dados inv√°lidos")
    print("   üîç 1 vaga suspeita (spam)")
    print("   üìä 1 vaga com sal√°rio an√¥malo")
    print("   ‚ú® 1 vaga internacional")
    
    # Testar valida√ß√£o individual
    print(f"\nüîç VALIDA√á√ÉO INDIVIDUAL:")
    print("-" * 40)
    
    for i, job in enumerate(test_jobs, 1):
        print(f"\nüìÑ Vaga {i}: {job['titulo'][:30]}...")
        validated_job = data_validator.validate_job(job)
        
        validation = validated_job['_validation']
        print(f"   Score de qualidade: {validation['quality_score']:.2f}")
        print(f"   Status: {'‚úÖ V√°lida' if validation['is_valid'] else '‚ùå Inv√°lida'}")
        
        # Mostrar corre√ß√µes aplicadas
        corrections = []
        for field_result in validation['field_results'].values():
            corrections.extend(field_result.corrections_applied)
        
        if corrections:
            print(f"   üîß Corre√ß√µes: {', '.join(set(corrections))}")
        
        # Mostrar erros
        errors = []
        for field_result in validation['field_results'].values():
            errors.extend(field_result.errors)
        
        if errors:
            print(f"   ‚ùå Erros: {len(errors)} encontrados")
            for error in errors[:2]:  # Mostrar apenas os primeiros 2
                print(f"      - {error}")
    
    return test_jobs


def test_batch_validation():
    """Testa valida√ß√£o em lote com relat√≥rio completo"""
    print(f"\n\nüîÑ VALIDA√á√ÉO EM LOTE:")
    print("=" * 40)
    
    test_jobs = create_realistic_test_data()
    
    # Executar valida√ß√£o em lote
    validated_jobs, quality_report = data_validator.validate_batch(test_jobs)
    
    # Mostrar relat√≥rio completo
    data_validator.print_quality_report(quality_report)
    
    return validated_jobs, quality_report


def test_data_filtering():
    """Testa filtro de dados v√°lidos vs inv√°lidos"""
    print(f"\n\nüéØ TESTE DE FILTRO DE DADOS:")
    print("=" * 40)
    
    test_jobs = create_realistic_test_data()
    validated_jobs, _ = data_validator.validate_batch(test_jobs)
    
    # Separar v√°lidos e inv√°lidos
    valid_jobs = [j for j in validated_jobs if j['_validation']['is_valid']]
    invalid_jobs = [j for j in validated_jobs if not j['_validation']['is_valid']]
    
    print(f"üìä Resultados do filtro:")
    print(f"   ‚úÖ Vagas v√°lidas: {len(valid_jobs)}")
    print(f"   ‚ùå Vagas inv√°lidas: {len(invalid_jobs)}")
    
    print(f"\n‚úÖ VAGAS APROVADAS:")
    for i, job in enumerate(valid_jobs, 1):
        score = job['_validation']['quality_score']
        print(f"   {i}. {job['titulo'][:40]}... (Score: {score:.2f})")
    
    print(f"\n‚ùå VAGAS REJEITADAS:")
    for i, job in enumerate(invalid_jobs, 1):
        score = job['_validation']['quality_score']
        print(f"   {i}. {job['titulo'][:40]}... (Score: {score:.2f})")
    
    return valid_jobs, invalid_jobs


def test_corrections_showcase():
    """Mostra exemplos de corre√ß√µes aplicadas"""
    print(f"\n\nüîß SHOWCASE DE CORRE√á√ïES AUTOM√ÅTICAS:")
    print("=" * 50)
    
    test_cases = [
        {
            'titulo': 'DESENVOLVEDOR PYTHON SENIOR',
            'empresa': 'TechCorp',
            'salario': 'R$8000 - R$12000',
            'localizacao': 'sao paulo',
            'data_publicacao': 'h√° 5 dias'
        }
    ]
    
    for case in test_cases:
        print(f"üìã ANTES da valida√ß√£o:")
        for field, value in case.items():
            print(f"   {field}: '{value}'")
        
        validated = data_validator.validate_job(case)
        
        print(f"\nüìã DEPOIS da valida√ß√£o:")
        for field, value in case.items():
            if field in validated:
                original = case[field]
                corrected = validated[field]
                if original != corrected:
                    print(f"   {field}: '{original}' ‚Üí '{corrected}' ‚úÖ")
                else:
                    print(f"   {field}: '{corrected}'")
        
        print(f"\nüîß Corre√ß√µes aplicadas:")
        corrections = []
        for field_result in validated['_validation']['field_results'].values():
            corrections.extend(field_result.corrections_applied)
        
        for correction in set(corrections):
            print(f"   ‚Ä¢ {correction}")


def test_anomaly_detection():
    """Testa detec√ß√£o de anomalias"""
    print(f"\n\nüö® TESTE DE DETEC√á√ÉO DE ANOMALIAS:")
    print("=" * 45)
    
    test_jobs = create_realistic_test_data()
    validated_jobs, quality_report = data_validator.validate_batch(test_jobs)
    
    if quality_report.anomalies:
        print(f"üîç {len(quality_report.anomalies)} anomalias detectadas:")
        
        for i, anomaly in enumerate(quality_report.anomalies, 1):
            print(f"\n{i}. Tipo: {anomaly['type']}")
            print(f"   Severidade: {anomaly['severity']}")
            
            if 'job_title' in anomaly:
                print(f"   Vaga: {anomaly['job_title'][:50]}...")
            elif 'company' in anomaly:
                print(f"   Empresa: {anomaly['company']}")
            
            if 'reason' in anomaly:
                print(f"   Raz√£o: {anomaly['reason']}")
    else:
        print("‚úÖ Nenhuma anomalia detectada")


def test_real_world_simulation():
    """Simula cen√°rio real com dados do scraper"""
    print(f"\n\nüåê SIMULA√á√ÉO DE CEN√ÅRIO REAL:")
    print("=" * 40)
    
    # Simular dados como se viessem do scraper
    scraped_data = [
        {
            'titulo': '   Senior Software Engineer   ',  # Espa√ßos extras
            'empresa': 'TECH SOLUTIONS LTDA',
            'salario': 'R$ 10.000,00 - R$ 15.000,00',  # V√≠rgulas decimais
            'localizacao': 'HOME OFFICE',
            'descricao': 'Excelente oportunidade para desenvolvedor experiente...',
            'requisitos': 'Python, Django, PostgreSQL, 5+ anos experi√™ncia',
            'beneficios': 'VR, VT, Plano Sa√∫de',
            'nivel_experiencia': 'Senior',
            'modalidade': 'Home Office',
            'data_publicacao': 'publicada h√° 2 dias'
        },
        {
            'titulo': 'dev jr',  # T√≠tulo muito curto e informal
            'empresa': '123 Tech',  # Nome suspeito
            'salario': 'negoci√°vel',  # Formato n√£o padr√£o
            'localizacao': '',  # Vazio
            'descricao': '',  # Vazio
            'requisitos': '',
            'beneficios': '',
            'nivel_experiencia': '',
            'modalidade': '',
            'data_publicacao': ''
        }
    ]
    
    print("üì• Dados como chegam do scraper:")
    for i, job in enumerate(scraped_data, 1):
        print(f"\nVaga {i}:")
        print(f"   T√≠tulo: '{job['titulo']}'")
        print(f"   Empresa: '{job['empresa']}'")
        print(f"   Sal√°rio: '{job['salario']}'")
    
    # Validar
    validated_jobs, report = data_validator.validate_batch(scraped_data)
    
    print(f"\nüì§ Dados ap√≥s valida√ß√£o:")
    valid_count = 0
    for i, job in enumerate(validated_jobs, 1):
        is_valid = job['_validation']['is_valid']
        score = job['_validation']['quality_score']
        
        print(f"\nVaga {i}: {'‚úÖ V√ÅLIDA' if is_valid else '‚ùå INV√ÅLIDA'} (Score: {score:.2f})")
        if is_valid:
            valid_count += 1
            print(f"   T√≠tulo: '{job['titulo']}'")
            print(f"   Empresa: '{job['empresa']}'")
            print(f"   Sal√°rio: '{job['salario']}'")
    
    print(f"\nüìä RESULTADO FINAL:")
    print(f"   Total processadas: {len(scraped_data)}")
    print(f"   V√°lidas para salvar: {valid_count}")
    print(f"   Taxa de aprova√ß√£o: {valid_count/len(scraped_data)*100:.1f}%")


def main():
    """Fun√ß√£o principal do teste"""
    print("üß™ TESTE COMPLETO DO SISTEMA DE VALIDA√á√ÉO")
    print("=" * 60)
    print("Este teste demonstra todas as funcionalidades do sistema de")
    print("valida√ß√£o de dados em cen√°rios realistas.")
    print("=" * 60)
    
    try:
        # Executar todos os testes
        test_validation_step_by_step()
        test_batch_validation()
        test_data_filtering()
        test_corrections_showcase()
        test_anomaly_detection()
        test_real_world_simulation()
        
        print("\n" + "=" * 60)
        print("üéâ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!")
        print("=" * 60)
        
        print("\nüí° RESUMO DOS BENEF√çCIOS DEMONSTRADOS:")
        print("   ‚úÖ Detec√ß√£o autom√°tica de dados inv√°lidos")
        print("   üîß Corre√ß√£o autom√°tica de formatos")
        print("   üö® Detec√ß√£o de anomalias e spam")
        print("   üìä Relat√≥rios detalhados de qualidade")
        print("   üéØ Filtro inteligente para salvar apenas dados v√°lidos")
        print("   üìà M√©tricas de qualidade e tend√™ncias")
        
        print("\nüöÄ PARA TESTAR COM SCRAPER REAL:")
        print("   Execute: python main.py")
        print("   O sistema de valida√ß√£o ser√° aplicado automaticamente!")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante teste: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()