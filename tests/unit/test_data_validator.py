#!/usr/bin/env python3
"""
Teste do sistema de valida√ß√£o de dados
"""

import sys
import os

# Adicionar diret√≥rio pai ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.data_validator import DataValidator, DataCleaner, FieldValidator, AnomalyDetector


def test_data_cleaner():
    """Testa a classe DataCleaner"""
    print("üß™ TESTE DO DATA CLEANER")
    print("-" * 30)
    
    cleaner = DataCleaner()
    
    # Teste normaliza√ß√£o de texto
    test_cases = [
        ("  DESENVOLVEDOR    JAVA  ", "DESENVOLVEDOR JAVA"),
        ("texto\tcom\nquebras", "texto com quebras"),
        ("", "")
    ]
    
    print("Normaliza√ß√£o de texto:")
    for input_text, expected in test_cases:
        result = cleaner.normalize_text(input_text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"   {status} '{input_text}' -> '{result}'")
    
    # Teste capitaliza√ß√£o
    print("\nCapitaliza√ß√£o:")
    cap_cases = [
        ("DESENVOLVEDOR SENIOR", "Desenvolvedor Senior"),
        ("analista de sistemas", "Analista De Sistemas"),
        ("gerente de projetos", "Gerente De Projetos")
    ]
    
    for input_text, expected in cap_cases:
        result = cleaner.fix_capitalization(input_text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"   {status} '{input_text}' -> '{result}'")
    
    # Teste extra√ß√£o de sal√°rio
    print("\nExtra√ß√£o de sal√°rio:")
    salary_cases = [
        ("R$ 5.000 - R$ 8.000", (5000.0, 8000.0)),
        ("R$ 7000", (7000.0, 7000.0)),
        ("A combinar", None),
        ("R$5000 a R$10000", (5000.0, 10000.0))
    ]
    
    for input_text, expected in salary_cases:
        result = cleaner.extract_salary_range(input_text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"   {status} '{input_text}' -> {result}")
    
    print("‚úÖ DataCleaner testado!")


def test_field_validator():
    """Testa valida√ß√£o de campos individuais"""
    print("\nüß™ TESTE DO FIELD VALIDATOR")
    print("-" * 30)
    
    validator = FieldValidator()
    
    # Teste t√≠tulo
    print("Valida√ß√£o de t√≠tulos:")
    title_cases = [
        ("Senior Software Engineer", True),
        ("Dev", False),  # Muito curto
        ("DESENVOLVEDOR JAVA", True),  # Ser√° corrigido
        ("", False)  # Vazio
    ]
    
    for title, should_be_valid in title_cases:
        result = validator.validate_field('titulo', title)
        status = "‚úÖ" if result.is_valid == should_be_valid else "‚ùå"
        print(f"   {status} '{title}' -> v√°lido: {result.is_valid}")
        if result.corrections_applied:
            print(f"       Corre√ß√µes: {result.corrections_applied}")
    
    # Teste empresa
    print("\nValida√ß√£o de empresas:")
    company_cases = [
        ("Tech Solutions Ltda", True),
        ("N√£o informada", False),
        ("123", False),  # S√≥ n√∫meros
        ("AB", False)   # Muito curto
    ]
    
    for company, should_be_valid in company_cases:
        result = validator.validate_field('empresa', company)
        status = "‚úÖ" if result.is_valid == should_be_valid else "‚ùå"
        print(f"   {status} '{company}' -> v√°lido: {result.is_valid}")
    
    # Teste sal√°rio
    print("\nValida√ß√£o de sal√°rios:")
    salary_cases = [
        ("R$ 5.000 - R$ 8.000", True),
        ("A combinar", True),
        ("R$ 150000", False),  # Muito alto, warning
        ("abc", False)  # Formato inv√°lido
    ]
    
    for salary, should_be_valid in salary_cases:
        result = validator.validate_field('salario', salary)
        has_errors = len(result.errors) > 0
        print(f"   üìä '{salary}' -> erros: {has_errors}, avisos: {len(result.warnings)}")
        if result.corrections_applied:
            print(f"       Valor corrigido: '{result.cleaned_value}'")
    
    print("‚úÖ FieldValidator testado!")


def test_anomaly_detector():
    """Testa detector de anomalias"""
    print("\nüß™ TESTE DO ANOMALY DETECTOR")
    print("-" * 30)
    
    detector = AnomalyDetector()
    
    # Criar dados de teste
    test_jobs = [
        {
            'titulo': 'Desenvolvedor Python',
            'empresa': 'TechCorp',
            'salario': 'R$ 6.000'
        },
        {
            'titulo': 'Analista Java',
            'empresa': 'TechCorp',
            'salario': 'R$ 7.000'
        },
        {
            'titulo': 'Senior Engineer',
            'empresa': 'BigTech',
            'salario': 'R$ 15.000'
        },
        {
            'titulo': 'Desenvolvedor Frontend',
            'empresa': 'TechCorp',
            'salario': 'R$ 5.500'
        },
        {
            'titulo': 'URGENTE!!! CLIQUE AQUI!!! $$$',  # T√≠tulo suspeito
            'empresa': 'Spam Company',
            'salario': 'R$ 50.000'  # Sal√°rio muito alto
        }
    ]
    
    anomalies = detector.detect_anomalies(test_jobs)
    
    print(f"Anomalias detectadas: {len(anomalies)}")
    for anomaly in anomalies:
        print(f"   ‚Ä¢ {anomaly['type']}: {anomaly.get('job_title', anomaly.get('company', 'N/A'))}")
        print(f"     Severidade: {anomaly['severity']}")
    
    print("‚úÖ AnomalyDetector testado!")


def test_full_validation():
    """Teste completo de valida√ß√£o"""
    print("\nüß™ TESTE COMPLETO DE VALIDA√á√ÉO")
    print("-" * 30)
    
    validator = DataValidator()
    
    # Dados de teste misturados (v√°lidos e inv√°lidos)
    test_jobs = [
        {
            'titulo': 'Senior Python Developer',
            'empresa': 'TechCorp Ltda',
            'salario': 'R$ 8.000 - R$ 12.000',
            'localizacao': 'S√£o Paulo - SP',
            'data_publicacao': 'h√° 2 dias',
            'descricao': 'Excelente oportunidade para desenvolvedor Python com experi√™ncia em Django e FastAPI.',
            'requisitos': 'Experi√™ncia com Python, Django, FastAPI, PostgreSQL',
            'beneficios': 'Vale refei√ß√£o, plano de sa√∫de, home office',
            'nivel_experiencia': 'S√™nior',
            'modalidade': 'Home Office'
        },
        {
            'titulo': 'Dev',  # T√≠tulo muito curto
            'empresa': 'N√£o informada',  # Empresa inv√°lida
            'salario': 'abc',  # Sal√°rio inv√°lido
            'localizacao': 'X',  # Localiza√ß√£o muito curta
            'data_publicacao': '2025-12-31',  # Data futura
            'descricao': 'Desc',  # Descri√ß√£o muito curta
            'requisitos': 'Req',  # Requisitos muito curtos
            'beneficios': 'Ben',  # Benef√≠cios muito curtos
            'nivel_experiencia': 'XYZ',  # N√≠vel inv√°lido
            'modalidade': 'ABC'  # Modalidade inv√°lida
        },
        {
            'titulo': 'ANALISTA DE SISTEMAS JAVA',  # Precisa corre√ß√£o de caps
            'empresa': 'JavaCorp Solutions',
            'salario': 'R$6000 - R$9000',  # Precisa formata√ß√£o
            'localizacao': 'remoto',  # Precisa padroniza√ß√£o
            'data_publicacao': 'publicada hoje',
            'descricao': 'Oportunidade para analista Java com conhecimento em Spring Boot e microservi√ßos.',
            'requisitos': 'Java, Spring Boot, microservi√ßos, Docker',
            'beneficios': 'Vale alimenta√ß√£o e transporte',
            'nivel_experiencia': 'Pleno',
            'modalidade': 'Remoto'
        }
    ]
    
    # Validar lote
    validated_jobs, report = validator.validate_batch(test_jobs)
    
    print(f"Jobs processados: {len(validated_jobs)}")
    print(f"Qualidade geral: {report.overall_quality:.1%}")
    
    # Mostrar relat√≥rio
    validator.print_quality_report(report)
    
    # Verificar corre√ß√µes
    print("\nüìä EXAMPLES DE CORRE√á√ïES:")
    for i, job in enumerate(validated_jobs):
        if '_validation' in job:
            corrections = []
            for field_result in job['_validation']['field_results'].values():
                corrections.extend(field_result.corrections_applied)
            
            if corrections:
                print(f"   Job {i+1}: {', '.join(set(corrections))}")
    
    print("‚úÖ Valida√ß√£o completa testada!")


def main():
    """Fun√ß√£o principal do teste"""
    print("üß™ TESTE DO SISTEMA DE VALIDA√á√ÉO DE DADOS")
    print("=" * 50)
    
    try:
        # Executar todos os testes
        test_data_cleaner()
        test_field_validator()
        test_anomaly_detector()
        test_full_validation()
        
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("\nüí° BENEF√çCIOS DA VALIDA√á√ÉO:")
        print("   ‚úÖ Detec√ß√£o autom√°tica de dados inv√°lidos")
        print("   ‚úÖ Corre√ß√£o autom√°tica de formatos")
        print("   ‚úÖ Detec√ß√£o de anomalias e padr√µes suspeitos")
        print("   ‚úÖ Relat√≥rios detalhados de qualidade")
        print("   ‚úÖ Filtros autom√°ticos para salvar apenas dados v√°lidos")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante teste: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()